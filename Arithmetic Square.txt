// Solved by: Shoumya

#include<iostream>
#include<ctime>
#include<vector>
#include<algorithm>
using namespace std;

#define endl "\n"
#define ll long long int

void fastIO() {
	ios_base::sync_with_stdio(false);
	cin.tie(0), cout.tie(0);

#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

int check(vector<vector<int> > &grid){

	int cnt = 0;

	// Row Checking
	if((grid[1][2]-grid[1][1])==(grid[1][3]-grid[1][2]))
		cnt++;

	if((grid[2][2]-grid[2][1])==(grid[2][3]-grid[2][2]))
		cnt++;

	if((grid[3][2]-grid[3][1])==(grid[3][3]-grid[3][2]))
		cnt++;

	// Column Checking
	if((grid[2][1]-grid[1][1])==(grid[3][1]-grid[2][1]))
		cnt++;

	if((grid[2][2]-grid[1][2])==(grid[3][2]-grid[2][2]))
		cnt++;

	if((grid[2][3]-grid[1][3])==(grid[3][3]-grid[2][3]))
		cnt++;

	// Diagonal Checking
	if((grid[2][2]-grid[1][1])==(grid[3][3]-grid[2][2]))
		cnt++;

	if((grid[2][2]-grid[1][3])==(grid[3][1]-grid[2][2]))
		cnt++;

	return cnt;
}

void solve() {
	int tc,t = 0, ans; cin>>tc;

	while(tc--){

		vector<vector<int> > grid(4,vector<int> (4,0)); ans = 0;

		cin>>grid[1][1]>>grid[1][2]>>grid[1][3];
		cin>>grid[2][1]>>grid[2][3];
		cin>>grid[3][1]>>grid[3][2]>>grid[3][3];

		grid[2][2] = (grid[1][1]+grid[3][3])/2; // Left Diagonal
		ans = max(ans,check(grid));

		grid[2][2] = (grid[1][2]+grid[3][2])/2; // Up-Down Middle Column
		ans = max(ans,check(grid));

		grid[2][2] = (grid[1][3]+grid[3][1])/2; // Right Diagonal
		ans = max(ans,check(grid));

		grid[2][2] = (grid[2][1]+grid[2][3])/2; // Left-Right Middle Column
		ans = max(ans,check(grid));

		cout<<"Case #"<<++t<<": "<<ans<<endl;
	}
}

int main() {
	// fastIO();
	// clock_t start = clock();
	// Write code here...

	solve();

// #ifndef ONLINE_JUDGE
	// clock_t stop = clock(); cout.precision(10);
	// cout << "\n\nTime taken: " << (double)(stop - start) / CLOCKS_PER_SEC * 1000 << " seconds" << endl;
// #endif

	return 0;
}